{"version":3,"file":"static/js/466.9ac29eaf.chunk.js","mappings":"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","sources":["webpack://client/./src/components/UI/container.module.css?8988","components/UI/container.js","webpack://client/./src/components/poll/comments/comment.module.css?3cf9","components/poll/comments/commentPage.js","webpack://client/./src/components/poll/votePoll/votepage.module.css?845c","components/poll/votePoll/votePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"conatiner\":\"container_conatiner__xS-Ti\"};","import React from \"react\";\r\nimport classes from \"./container.module.css\";\r\nconst Container = (props) => {\r\n  return <div className={classes.conatiner}>{props.children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"li\":\"comment_li__2JHqy\",\"ptext\":\"comment_ptext__Ta5Xz\",\"inputfield\":\"comment_inputfield__HwSfO\"};","import React, { useState, useContext, useEffect } from \"react\";\r\nimport Container from \"../../UI/container\";\r\nimport AuthContext from \"../../../store/context-api\";\r\nimport classes from \"./comment.module.css\";\r\nimport axios from \"axios\";\r\n\r\nconst CommentPage = (props) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const id = props.pollId;\r\n  const AuthCtx = useContext(AuthContext);\r\n  const token = AuthCtx.token;\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        const getresponse = await axios.get(\r\n          `https://deployevelocity-project.onrender.com/api/v1/comments/${id}`,\r\n          {\r\n            headers: { Authorization: token },\r\n          }\r\n        );\r\n        // console.log(\"getresponse>>>\", getresponse.data.data.comments);\r\n        setComments(getresponse.data.data.comments);\r\n      } catch (error) {\r\n        console.error(\"Error fetching comments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [id, token]);\r\n\r\n  const submitCommentHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      //   console.log(pollId, newComment);\r\n      const obj = { content: newComment };\r\n\r\n      const response = await axios.post(\r\n        `https://deployevelocity-project.onrender.com/api/v1/comments/${id}`,\r\n        obj,\r\n        { headers: { Authorization: token } }\r\n      );\r\n\r\n      //   console.log(\"response>>>\", response);\r\n      if (response.status !== 201) {\r\n        alert(\"somthing went wrong\");\r\n      }\r\n      setNewComment(\"\");\r\n      const getresponse = await axios.get(\r\n        `https://deployevelocity-project.onrender.com/api/v1/comments/${id}`,\r\n        {\r\n          headers: { Authorization: token },\r\n        }\r\n      );\r\n      //   console.log(\"getresponse>>>\", getresponse.data.data.comments);\r\n      setComments(getresponse.data.data.comments);\r\n    } catch (error) {\r\n      console.error(\"Error posting comment:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h2>Comments</h2>\r\n      <ul>\r\n        {comments.map((comment, index) => (\r\n          <li className={classes.li} key={index}>\r\n            <p className={classes.ptext}>{comment.text}</p>\r\n            <p>\r\n              <small>By {comment.user.username}</small>\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={submitCommentHandler}>\r\n        <textarea\r\n          className={classes.inputfield}\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Write a comment...\"></textarea>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommentPage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"optionlist\":\"votepage_optionlist__vXidh\",\"options\":\"votepage_options__yAUoC\",\"conatiner2\":\"votepage_conatiner2__tkIjk\",\"btn\":\"votepage_btn__duOHz\"};","import React, { useState, useEffect, useContext, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Container from \"../../UI/container\";\r\nimport CommentPage from \"../comments/commentPage\";\r\nimport classes from \"./votepage.module.css\";\r\nimport AuthContext from \"../../../store/context-api\";\r\nimport axios from \"axios\";\r\n\r\nconst VotePage = () => {\r\n  const [count, setCount] = useState({});\r\n  const [ArryOfPoll, setArrayOfPoll] = useState([]);\r\n  const [commentpage, setCommentpage] = useState(false);\r\n  const AuthCtx = useContext(AuthContext);\r\n  const token = AuthCtx.token;\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const getPollData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://deployevelocity-project.onrender.com/api/v1/polls/create\",\r\n          {\r\n            headers: { Authorization: token },\r\n          }\r\n        );\r\n        const pollData = await response.json();\r\n        setArrayOfPoll(pollData.data);\r\n\r\n        // Initialize count with initial poll data\r\n        const initialCounts = {};\r\n        pollData.data.forEach((poll) => {\r\n          if (typeof poll.voteCounts === \"object\" && poll.voteCounts !== null) {\r\n            initialCounts[poll._id] = poll.voteCounts;\r\n          }\r\n        });\r\n        setCount(initialCounts);\r\n        // console.log(\"Initial counts:\", initialCounts);\r\n      } catch (error) {\r\n        console.error(\"Error fetching polls:\", error);\r\n      }\r\n    };\r\n\r\n    getPollData();\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current) {\r\n      socketRef.current = io(\"https://deployevelocity-project.onrender.com\", {\r\n        query: { token },\r\n      });\r\n\r\n      socketRef.current.on(\"voteUpdate\", ({ pollId, voteCounts }) => {\r\n        // console.log(\"voteUpdate event received:\");\r\n        setCount((prevCounts) => ({\r\n          ...prevCounts,\r\n          [pollId]: voteCounts,\r\n        }));\r\n      });\r\n\r\n      socketRef.current.on(\"voteError\", ({ message }) => {\r\n        console.error(\"Error:\", message);\r\n      });\r\n\r\n      return () => {\r\n        socketRef.current.disconnect();\r\n      };\r\n    }\r\n  }, [token]);\r\n\r\n  const onclickHandler = async (pollId, option) => {\r\n    // Emit the vote event to the server using the persistent socket\r\n    socketRef.current.emit(\"vote\", { pollId, option });\r\n    try {\r\n      await axios.post(\r\n        \"https://deployevelocity-project.onrender.com/api/v1/votes\",\r\n        { pollId, option, userId: AuthCtx.userId },\r\n        { headers: { Authorization: token } }\r\n      );\r\n\r\n      // Optimistically update the count\r\n      setCount((prevCounts) => {\r\n        const newCounts = { ...prevCounts };\r\n        if (!newCounts[pollId]) {\r\n          newCounts[pollId] = {};\r\n        }\r\n        if (!newCounts[pollId][option]) {\r\n          newCounts[pollId][option] = 0;\r\n        }\r\n        newCounts[pollId][option] += 1;\r\n        // console.log(\"Optimistic update:\", newCounts);\r\n        return newCounts;\r\n      });\r\n    } catch (error) {\r\n      alert(error.response.data.message);\r\n      // console.log(\"response.error>>>>>>\", error.response.data.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {ArryOfPoll.map((item) => (\r\n        <Container key={item._id} className={classes.conatiner2}>\r\n          <div>\r\n            <h2>{item.question}</h2>\r\n            <div className={classes.optionlist}>\r\n              {item.options.map((option, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={classes.options}\r\n                  onClick={() => onclickHandler(item._id, option)}>\r\n                  <span>{option}</span>\r\n                  <span>{count[item._id]?.[option] || 0}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <button\r\n            className={classes.btn}\r\n            onClick={() => setCommentpage((prevstaet) => !prevstaet)}>\r\n            comments\r\n          </button>\r\n          {commentpage && <CommentPage pollId={item._id} />}\r\n        </Container>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VotePage;\r\n"],"names":["props","_jsx","className","classes","children","comments","setComments","useState","newComment","setNewComment","id","pollId","token","useContext","AuthContext","useEffect","async","getresponse","axios","get","concat","headers","Authorization","data","error","console","fetchComments","_jsxs","Container","map","comment","index","text","user","username","onSubmit","e","preventDefault","obj","content","post","status","alert","value","onChange","target","placeholder","type","VotePage","count","setCount","ArryOfPoll","setArrayOfPoll","commentpage","setCommentpage","AuthCtx","socketRef","useRef","response","fetch","pollData","json","initialCounts","forEach","poll","voteCounts","_id","getPollData","current","io","query","on","_ref","prevCounts","_ref2","message","disconnect","item","question","options","option","_count$item$_id","onClick","emit","userId","newCounts","onclickHandler","prevstaet","CommentPage"],"sourceRoot":""}